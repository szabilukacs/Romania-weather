import streamlit as st
import pandas as pd
import altair as alt
from meteostat import Hourly
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np
import time

from utils.connect_db import connect_to_db
from utils.queries import SELECT_STATION_DATA

st.title("üìÖ Daily Weather Data")

# TODO: coco k√≥d alapj√°n ki is irni √≥r√°nk√©nt hogy mi volt a helyzet.
# TODO: ellenorizni az adatokn'l h'ny null van az oras adatoknal

# --- √Ållom√°s kiv√°laszt√°s (ha t√∂bb van) ---
# √Ållom√°s kiv√°laszt√°sa
def load_data(query):
    conn = connect_to_db()
    df = pd.read_sql(query, conn)
    conn.close()
    return df

stations = load_data(SELECT_STATION_DATA)
station_name = st.selectbox("Choose a station:", stations["name"])
station_id = stations.loc[stations["name"] == station_name, "wmo"].values[0]
hourly_start = stations.loc[stations["name"] == station_name, "hourly_start"].values[0]
elevation = stations.loc[stations["name"] == station_name, "elevation"].values[0]

# --- D√°tum kiv√°laszt√°s ---
today = pd.to_datetime("today").date()
selected_date = st.date_input("V√°lassz egy napot:", today - pd.Timedelta(days=14), min_value=hourly_start)

customy1 = datetime(selected_date.year,1,1)
customy2 = datetime(selected_date.year,12,31)
data = Hourly(station_id,start = customy1,end = customy2)
print(data.coverage())

# --- Adatok lek√©rdez√©se ---
query = f"""
SELECT time, temp, dwpt, rhum, prcp, snow, wdir, wspd, wpgt, pres, tsun, coco
FROM weather_data_hourly
WHERE station_id = {station_id}
  AND DATE(time) = '{selected_date}'
ORDER BY time ASC;
"""
print(station_id)
print(selected_date)
df = load_data(query)

if df.empty:
    st.warning("‚ùå Nincs adat a kiv√°lasztott napra.")
else:
    
    st.subheader(f"üåç √Ållom√°s: {station_name} ‚Äì {elevation} m - {selected_date}")

    # --- H≈ëm√©rs√©klet vonaldiagram ---
    temp_chart = (
        alt.Chart(df)
        .mark_line(point=True, color="red")
        .encode(
            x=alt.X("time:T", title="Id≈ë"),
            y=alt.Y("temp:Q", title="√Åtlagh≈ëm√©rs√©klet (¬∞C)"),
            tooltip=["time", "temp"]
        )
        .properties(title="üå° Napi h≈ëm√©rs√©klet alakul√°sa", width=700, height=300)
    )

    # --- Csapad√©k oszlopdiagram ---
    prcp_chart = (
        alt.Chart(df)
        .mark_bar(color="blue", opacity=0.7)
        .encode(
            x=alt.X("time:T", title="Id≈ë"),
            y=alt.Y("prcp:Q", title="Csapad√©k (mm)"),
            tooltip=["time", "prcp"]
        )
        .properties(title="üåß Napi csapad√©k", width=700, height=200)
    )

    st.altair_chart(temp_chart, use_container_width=True)
    st.altair_chart(prcp_chart, use_container_width=True)

        # Csak ahol van adat
    # --- Adatok el≈ëfeldolgoz√°sa ---
    df = df.dropna(subset=["wdir", "wspd"]).reset_index(drop=True)

    angles = np.deg2rad(df["wdir"] + 180)  # meteorol√≥giai sz√©lir√°ny
    speeds = df["wspd"].values
    u = speeds * np.cos(angles)
    v = speeds * np.sin(angles)

    st.title("Sz√©lir√°ny anim√°ci√≥")

    play_button = st.button("‚ñ∂Ô∏è Play 24 √≥r√°s anim√°ci√≥")

    if play_button:
        placeholder = st.empty()  # ide rajzoljuk minden l√©p√©sben
        for hour_idx in range(len(df)):
            fig, ax = plt.subplots(figsize=(6,6))
            ax.quiver(0, 0, u[hour_idx], v[hour_idx], angles='xy', scale_units='xy', scale=1, color="crimson", width=0.015)

            max_speed = max(speeds) + 5
            ax.set_xlim(-max_speed, max_speed)
            ax.set_ylim(-max_speed, max_speed)

            # √âgt√°jak jelz√©se
            ax.text(0, max_speed, "√â", ha="center", va="bottom", fontsize=12, fontweight="bold")
            ax.text(0, -max_speed, "D", ha="center", va="top", fontsize=12, fontweight="bold")
            ax.text(-max_speed, 0, "Ny", ha="right", va="center", fontsize=12, fontweight="bold")
            ax.text(max_speed, 0, "K", ha="left", va="center", fontsize=12, fontweight="bold")

            ax.plot(0,0,"ko")
            ax.set_title(
                f"√ìra: {df.loc[hour_idx,'time'].hour}:00 | Sz√©l: {speeds[hour_idx]:.1f} km/h | ir√°ny: {df.loc[hour_idx,'wdir']}¬∞",
                fontsize=14
            )
            ax.set_xticks([])
            ax.set_yticks([])
            ax.set_aspect('equal')

            placeholder.pyplot(fig)
            time.sleep(0.3)  # f√©l m√°sodpercenk√©nt v√°lt

    # Streamlit slider
    hour_idx = st.slider(
        "V√°lassz √≥r√°t:",
        min_value=0,
        max_value=len(df)-1,
        value=0,
        format="√ìra %d"
    )

    # --- Matplotlib √°bra ---
    fig, ax = plt.subplots(figsize=(6,6))

    # Ny√≠l rajzol√°sa az adott √≥r√°ra
    ax.quiver(0, 0, u[hour_idx], v[hour_idx], angles='xy', scale_units='xy', scale=1, color="crimson", width=0.015)

    # Tengelyek √©s sk√°la
    max_speed = max(speeds) + 5
    ax.set_xlim(-max_speed, max_speed)
    ax.set_ylim(-max_speed, max_speed)

    # √âgt√°jak jelz√©se
    ax.text(0, max_speed, "√â", ha="center", va="bottom", fontsize=12, fontweight="bold")
    ax.text(0, -max_speed, "D", ha="center", va="top", fontsize=12, fontweight="bold")
    ax.text(-max_speed, 0, "Ny", ha="right", va="center", fontsize=12, fontweight="bold")
    ax.text(max_speed, 0, "K", ha="left", va="center", fontsize=12, fontweight="bold")

    # K√∂z√©ps≈ë pont
    ax.plot(0,0,"ko")  # az orig√≥ jelz√©se

    # C√≠m √©s tooltip
    ax.set_title(
        f"Sz√©l: {df.loc[hour_idx,'wspd']:.1f} km/h\nir√°ny: {df.loc[hour_idx,'wdir']}¬∞ (0¬∞ = √âszak)",
        fontsize=14
    )

    # Tengelyek elt√ºntet√©se
    ax.set_xticks([])
    ax.set_yticks([])
    ax.set_aspect('equal')

    st.pyplot(fig)

    total_sun_minutes = df['tsun'].sum()
    hours = total_sun_minutes // 60
    minutes = total_sun_minutes % 60

    st.metric(
        label="üåû √ñsszes naps√ºt√©s aznap",
        value=f"{hours}h {minutes}m"
    )

    # --- H√≥ √∂sszes√≠t√©se ---
    total_snow = df['snow'].sum()  # mm

    # √ìra √©s perc konverzi√≥ nem kell, mert mm-ben m√©rj√ºk
    st.metric(
        label="‚ùÑÔ∏è Hullott h√≥ mennyis√©g",
        value=f"{total_snow:.1f} mm"
    )



    # Mutatjuk a t√°bl√°zatot
    st.dataframe(df)

    


