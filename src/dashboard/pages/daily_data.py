import streamlit as st
import pandas as pd
import altair as alt
from meteostat import Hourly
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np
import time

from utils.connect_db import connect_to_db
from utils.queries import SELECT_STATION_DATA
from utils.constants import COCO_CODES

st.title("üìÖ Daily Weather Data")

# TODO: coco k√≥d alapj√°n ki is irni √≥r√°nk√©nt hogy mi volt a helyzet.
# TODO: ellenorizni az adatokn'l h'ny null van-e az oras adatoknal

# --- √Ållom√°s kiv√°laszt√°s (ha t√∂bb van) ---
# √Ållom√°s kiv√°laszt√°sa
def load_data(query):
    conn = connect_to_db()
    df = pd.read_sql(query, conn)
    conn.close()
    return df

stations = load_data(SELECT_STATION_DATA)
station_name = st.selectbox("Choose a station:", stations["name"])
station_id = stations.loc[stations["name"] == station_name, "wmo"].values[0]
hourly_start = stations.loc[stations["name"] == station_name, "hourly_start"].values[0]
elevation = stations.loc[stations["name"] == station_name, "elevation"].values[0]

# --- D√°tum kiv√°laszt√°s ---
today = pd.to_datetime("today").date()
selected_date = st.date_input("V√°lassz egy napot:", today - pd.Timedelta(days=14), min_value=hourly_start)

customy1 = datetime(selected_date.year,1,1)
customy2 = datetime(selected_date.year,12,31)
data = Hourly(station_id,start = customy1,end = customy2)
print(data.coverage())

# --- Adatok lek√©rdez√©se ---
query = f"""
SELECT time, temp, dwpt, rhum, prcp, snow, wdir, wspd, wpgt, pres, tsun, coco
FROM weather_data_hourly
WHERE station_id = {station_id}
  AND DATE(time) = '{selected_date}'
ORDER BY time ASC;
"""
print(station_id)
print(selected_date)
df = load_data(query)

if df.empty:
    st.warning("‚ùå Nincs adat a kiv√°lasztott napra.")
else:
    
    st.subheader(f"üåç √Ållom√°s: {station_name} ‚Äì {elevation} m - {selected_date}")

    # --- H≈ëm√©rs√©klet vonaldiagram ---
    temp_chart = (
        alt.Chart(df)
        .mark_line(point=True, color="red")
        .encode(
            x=alt.X("time:T", title="Id≈ë"),
            y=alt.Y("temp:Q", title="√Åtlagh≈ëm√©rs√©klet (¬∞C)"),
            tooltip=["time", "temp"]
        )
        .properties(title="üå° Napi h≈ëm√©rs√©klet alakul√°sa", width=700, height=300)
    )

    # --- Csapad√©k oszlopdiagram ---
    prcp_chart = (
        alt.Chart(df)
        .mark_bar(color="blue", opacity=0.7)
        .encode(
            x=alt.X("time:T", title="Id≈ë"),
            y=alt.Y("prcp:Q", title="Csapad√©k (mm)"),
            tooltip=["time", "prcp"]
        )
        .properties(title="üåß Napi csapad√©k", width=700, height=200)
    )

    st.altair_chart(temp_chart, use_container_width=True)
    st.altair_chart(prcp_chart, use_container_width=True)
    
    # Csak a sz√ºks√©ges oszlopok
    
            # Felt√©telezz√ºk, hogy df tartalmazza: time, coco
     # Biztons√°gos konverzi√≥ sz√°mra
    df_coco = df[["time", "coco"]].dropna().reset_index(drop=True)
    df_coco["coco"] = df_coco["coco"].astype(float).round().astype(int)

        # Felt√©rk√©pez√©s condition sz√∂vegre
    df_coco["condition"] = df_coco["coco"].map(COCO_CODES)
    # 1Ô∏è‚É£ id≈ëszakok kisz√°m√≠t√°sa: meddig tartott egy adott √°llapot
    df_coco["end_time"] = df_coco["time"].shift(-1)  # k√∂vetkez≈ë v√°lt√°s az adott sor v√©ge
    df_coco = df_coco.dropna(subset=["end_time"])    # utols√≥ sorban nincs end_time

    # 2Ô∏è‚É£ Altair s√°vdiagram (timeline)
    timeline = (
        alt.Chart(df_coco)
        .mark_bar()
        .encode(
            x=alt.X("time:T", title="Id≈ë"),
            x2="end_time:T",  # id≈ëszak v√©ge
            y=alt.Y("condition:N", title="Id≈ëj√°r√°si √°llapot"),
            color=alt.Color("condition:N", legend=alt.Legend(title="√Ållapot")),
            tooltip=["time:T", "end_time:T", "condition"]
        )
        .properties(
            title="üå¶ Id≈ëj√°r√°si √°llapotok id≈ëvonala",
            width=700,
            height=200
        )
    )

    st.altair_chart(timeline, use_container_width=True)


    total_sun_minutes = df['tsun'].sum()
    hours = total_sun_minutes // 60
    minutes = total_sun_minutes % 60

    st.metric(
        label="üåû √ñsszes naps√ºt√©s aznap",
        value=f"{hours}h {minutes}m"
    )

    # --- H√≥ √∂sszes√≠t√©se ---
    total_snow = df['snow'].sum()  # mm

    # √ìra √©s perc konverzi√≥ nem kell, mert mm-ben m√©rj√ºk
    st.metric(
        label="‚ùÑÔ∏è Hullott h√≥ mennyis√©g",
        value=f"{total_snow:.1f} mm"
    )



    # Mutatjuk a t√°bl√°zatot
    st.dataframe(df)

    


